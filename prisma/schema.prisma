generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mongodb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Role {
    USER
    COACH
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String  @id @default(auto()) @map("_id") @db.ObjectId
    email          String  @unique
    name           String
    profile_pic    String?
    hashedPassword String?

    Role         Role
    Reservations Reservation[]
    Posts        Post[]
    Profile      Profile?
    Session      Session[]
    Accounts     Account[]
    // image        Image?
}

model Profile {
    id             String  @id @default(auto()) @map("_id") @db.ObjectId
    specialisation String?
    education      String?
    user           User    @relation(fields: [userId], references: [id])
    userId         String  @unique @db.ObjectId
    bio            String
}

model Post {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    author          User          @relation(fields: [authorId], references: [id])
    authorId        String        @db.ObjectId
    description     String
    Title           String
    price           Int
    authorName      String?
    yearsExperience String?
    localisation    String?
    currentCompany  String?
    disponibilities DateTime[]    @default(now())
    isBooked        Boolean?
    experienceField String?
    linkedin        String?
    whatsApp        String?
    twitter         String?
    profilePic      String?
    // image           Image?
    Reservation     Reservation[]
}


model Reservation {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    reservedBy    User     @relation(fields: [authorId], references: [id])
    authorId      String   @unique @db.ObjectId
    postReference Post     @relation(fields: [postId], references: [id])
    postId        String   @db.ObjectId
    createdAt     DateTime @default(now())
    payed         Boolean  @default(false)
    DateReserved  DateTime // Ajout du champ DateReserved
    message       String?
}
